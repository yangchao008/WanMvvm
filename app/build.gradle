apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.chao.wanmvvm"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    task debugToFir {
        //gradlew debugToFir
        dependsOn 'assembleDebug'
        doLast {
            def upUrl = "http://api.fir.im/apps"
            def appName = "WanMvvmPython"
            def bundleId = project.android.defaultConfig.applicationId
            def verName = project.android.defaultConfig.versionName
            def apiToken = "a8630f9f8aaf5cdd116d1862bf6936d3"
//            def iconPath = "../../WanMvvm/app/src/main/res/mipmap-xxhdpi/ic_launcher.png"
//            def apkPath = "../../WanMvvm/app/build/outputs/apk/debug/app-debug.apk"
            def iconPath = "D:/Android/studio_space/WanMvvm/app/src/main/res/mipmap-xxhdpi/ic_launcher.png"
            def apkPath = "D:/Android/studio_space/WanMvvm/app/build/outputs/apk/debug/app-debug.apk"
            def buildNumber = project.android.defaultConfig.versionCode
            def changeLog = "版本更新日志"
            //执行Python脚本
            def process = "python upToFir.py ${upUrl} ${appName} ${bundleId} ${verName} ${apiToken} ${iconPath} ${apkPath} ${buildNumber} ${changeLog}".execute()
            println("开始上传至fir")
            //获取Python脚本日志，便于出错调试
            ByteArrayOutputStream result = new ByteArrayOutputStream()
            def inputStream = process.getInputStream()
            byte[] buffer = new byte[1024]
            int length
            while ((length = inputStream.read(buffer)) != -1) {
                result.write(buffer, 0, length)
            }
            println(result.toString("UTF-8"))
            println "上传结束 "
        }
    }


}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':mvvm')
    implementation project(':libdownload')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'



// Use if Kotlin user.
    kapt "com.github.agrosner.dbflow:processor:${dbflow_version}"

// Annotation Processor
// if only using Java, use this. If using Kotlin do NOT use this.
//    annotationProcessor "com.github.agrosner.dbflow:processor:${dbflow_version}"

// core set of libraries
    implementation "com.github.agrosner.dbflow:core:${dbflow_version}"
    implementation "com.github.agrosner.dbflow:lib:${dbflow_version}"

      // sql-cipher database encryption (optional)
    implementation "com.github.agrosner.dbflow:sqlcipher:${dbflow_version}"
//    implementation "net.zetetic:android-database-sqlcipher:${sqlcipher_version}@aar"

    // DBFlow for kotlin
    api "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}@aar"

      // RXJava 2 support
//    implementation "com.github.agrosner.dbflow:reactive-streams:${dbflow_version}"
      // Kotlin Coroutines
//    implementation "com.github.agrosner.dbflow:coroutines:${dbflow_version}"

      // Android Architecture Components Paging Library Support
//    implementation "com.github.agrosner.dbflow:paging:${dbflow_version}"

      // adds generated content provider annotations + support.
//    implementation "com.github.agrosner.dbflow:contentprovider:${dbflow_version}"

      // DBFlow for RXJava2
//    api "com.github.Raizlabs.DBFlow:dbflow-rx2:${dbflow_version}"

    // RXJava2 optional, for use with Kotlin as a nice companion.
    // DBFlow for kotlin RXJava2
//    api "com.github.Raizlabs.DBFlow:dbflow-rx2-kotlinextensions:${dbflow_version}"

}
